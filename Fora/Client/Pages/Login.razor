@page "/login"
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />

    <label for="username">Username</label>
    <InputText id="username" @bind-Value="user.Username" />
    <label for="username">Password</label>
    <InputText id="password" @bind-Value="user.Password" type="password" />
    <button type="submit" class="btn btn-primary">Login</button>
    <ValidationSummary />
</EditForm>

@if (!string.IsNullOrEmpty(errorMsg))
{
    <p class="text-warning">@errorMsg</p>
}

<div>
    <p>Not a user? <a href="signup">Register</a></p>
</div>

@code {
    UserDTO user = new();
    string errorMsg = null;

    async Task HandleLogin()
    {
        // Call api
        var result = await HttpClient.PostAsJsonAsync("api/account/login", user);

        if (result.StatusCode == System.Net.HttpStatusCode.OK)
        {
            // Read the token
            var token = await result.Content.ReadAsStringAsync();

            // Save token in storage
            await LocalStorage.SetItemAsync("token", token);

            // Update state
            await AuthStateProvider.GetAuthenticationStateAsync();

            // Check if user is banned or flag for removal
            var userInDb = await HttpClient.GetFromJsonAsync<UserModel>($"api/users/{user.Username}");

            if (userInDb.Banned)
            {
                errorMsg = "User is banned. Contact the administrator";
                await LocalStorage.RemoveItemAsync("token");
                await AuthStateProvider.GetAuthenticationStateAsync();
            }
            else if (userInDb.Deleted)
            {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Revive account?");
                if (confirmed)
                {
                    await HttpClient.PutAsync($"api/users/toggleremoveflag/{user.Username}", null);
                    NavManager.NavigateTo("/");
                }
                else
                {
                    await LocalStorage.RemoveItemAsync("token");
                    await AuthStateProvider.GetAuthenticationStateAsync();
                }
            }
            else
            {
                NavManager.NavigateTo("/");
            }

        }
        else
        {
            errorMsg = await result.Content.ReadAsStringAsync();
        }
    }
}
