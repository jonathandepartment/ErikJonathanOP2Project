@page "/settings"
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<h2 class="display-2">Settings </h2>
@*user interests*@
<div class="row">
    <div class="col-8">
        <h3>My interests</h3>
        @*remove user interests*@
        @*remove interests i've created*@
    </div>
    <div class="col-4">
        @*create new interest*@
        <h3>Add a new interest</h3>
        <EditForm>
            <InputText type="text" />
            <button class="btn btn-sm btn-success">Add</button>
        </EditForm>
    </div>
</div>

@*all interests*@
<div class="row">
    <h3>All interests</h3>
    @*add to user interests*@
</div>

<div class="row rounded-1 m3 p-2 w-50">
    @*change password*@
    <h3>Change password</h3>
    <EditForm Model="Password" OnValidSubmit="ChangePassword">
        <InputText @bind-Value="Password.OldPassword" type="password" placeholder="old password" />
        <InputText @bind-Value="Password.NewPassword" type="password" placeholder="new password" />
        <button class="btn btn-success mt-2" type="submit">Change</button>
    </EditForm>
</div>

<div class="row">
    @*see own threads*@
    <h3>Threads</h3>
</div>

<div class="row">
    @*flag as removed*@
    <button class="btn btn-warning">Flag as removed</button>
    @*remove user*@
    <button class="btn btn-danger">Remove user</button>
</div>

<AuthorizeView Roles="Admin">
    <hr/>
    <h3>Admin Controls</h3>
    @*remove interests*@

    @*check if user is admin*@

    <div class="row">
        <h4>Users</h4>
        @*promote to admin*@

        @*demote admin*@

        @*ban user*@

        @*unban user*@
    </div>
</AuthorizeView>

@code {
    ChangePasswordModel Password = new();

    Task ChangePassword()
    {
        return null;
    }

    async Task RemoveUser(string userId)
    {
        await HttpClient.DeleteAsync($"api/users/{userId}");
        await LocalStorage.RemoveItemAsync("token");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavManager.NavigateTo("/signup");
    }
}
