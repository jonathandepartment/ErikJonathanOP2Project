@page "/settings"
@using Fora.Shared.ViewModels
@using System.Security.Claims
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject ISettingsService SettingsService

<PageTitle>Settings</PageTitle>

<h2 class="display-2">Settings </h2>

@*user interests*@
<div class="row">
    <TogglableComponent Title="My Interests">
        <div class="col">
            @if (MyInterests != null)
            {
                <ul class="list-group">
                    @foreach (var interest in MyInterests)
                    {
                        <li class="list-group-item w-75">
                            @interest.Name
                            <button @onclick="() => RemoveUserInterest(interest.Id)" class="btn btn-sm btn-danger float-end">Remove</button>
                        </li>
                    }
                </ul>
            }
        </div>
        <div class="col">
            <h3>Add a new interest</h3>
            <EditForm Model="NewInterest" OnValidSubmit="AddNewInterest">
                <InputText @bind-Value="NewInterest.Name" />
                <button class="btn btn-sm btn-success" type="submit">Add</button>
            </EditForm>
        </div>
    </TogglableComponent>
</div>

@*all interests*@
<div class="row">
    <TogglableComponent Title="All Interests">
        <h3>All interests</h3>
        @if (AllInterests != null)
        {
            <ul class="list-group">
                @foreach (var interest in AllInterests)
                {
                    <li class="list-group-item w-75">
                        @interest.Name
                        <button @onclick="() => AddUserInterest(interest.Id)" class="btn btn-sm btn-success float-end">Add to my interests</button>
                        @if (Admin || CurrentUserId == interest.AuthorId)
                        {
                            <button @onclick="() => RemoveInterest(interest.Id)" class="btn btn-sm btn-danger float-end">Remove</button>
                        }
                    </li>
                }
            </ul>
        }
        @*add to user interests*@
    </TogglableComponent>
</div>

<div class="row">
    <TogglableComponent Title="Change Password">
        @*change password*@
        <h3>Change password</h3>
        <EditForm Model="Password" OnValidSubmit="ChangePassword">
            <InputText @bind-Value="Password.OldPassword" type="password" placeholder="old password" />
            <InputText @bind-Value="Password.NewPassword" type="password" placeholder="new password" />
            <button class="btn btn-sm btn-success mt-2" type="submit">Change</button>
        </EditForm>
    </TogglableComponent>
</div>

<div class="row">
    <TogglableComponent Title="Threads">
        @*see own threads*@
        <h3>Threads</h3>
    </TogglableComponent>
</div>

<div class="row">
    <TogglableComponent Title="Edit User">
        @*flag as removed*@
        <button class="btn btn-warning">Flag as removed</button>
        @*remove user*@
        <button class="btn btn-danger">Remove user</button>
    </TogglableComponent>
</div>

<AuthorizeView Roles="Admin">
    <hr/>
    <h3>Admin Controls</h3>
    @*remove interests*@

    @*check if user is admin*@

    <div class="row">
        <h4>Users</h4>
        @*promote to admin*@

        @*demote admin*@

        @*ban user*@

        @*unban user*@
    </div>
</AuthorizeView>

@code {
    int CurrentUserId { get; set; }
    bool Admin { get; set; }
    List<InterestViewModel> MyInterests { get; set; }
    List<InterestViewModel> AllInterests { get; set; }
    ChangePasswordModel Password = new();
    AddInterestModel NewInterest { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        MyInterests = await SettingsService.GetMyInterests();
        AllInterests = await SettingsService.GetAllInterests();
        AllInterests = AllInterests.Where(i => MyInterests.All(mi => mi.Id != i.Id))
            .ToList();
        //var result = peopleList2.Where(p => peopleList1.All(p2 => p2.ID != p.ID));
        // get user
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var id = authstate.User.Claims.Where(c => c.Type == ClaimTypes.Authentication)
            .Select(c => c.Value).SingleOrDefault();
        var adminCheck = authstate.User.Claims.Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value).SingleOrDefault();

        Admin = adminCheck == "Admin" ? true : false;
        CurrentUserId = int.Parse(id);
    }

    async Task AddNewInterest()
    {
        var addedInterest = await SettingsService.AddNewInterest(NewInterest);
        await SettingsService.AddNewUserInterest(addedInterest.Id);
        NewInterest.Name = string.Empty;
        StateHasChanged();
    }

    async Task AddUserInterest(int id)
    {
        await SettingsService.AddNewUserInterest(id);
        AllInterests = AllInterests.Where(i => i.Id != id).ToList();
    }

    async Task RemoveInterest(int id)
    {
        AllInterests = AllInterests.Where(i => i.Id != id).ToList();
        await SettingsService.RemoveInterest(id);
    }

    async Task RemoveUserInterest(int id)
    {
        MyInterests = MyInterests.Where(i => i.Id != id).ToList();
        await SettingsService.RemoveUserInterest(id);
    }

    Task ChangePassword()
    {
        return null;
    }

    async Task RemoveUser(string userId)
    {

        //await HttpClient.DeleteAsync($"api/users/{userId}");
        await LocalStorage.RemoveItemAsync("token");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        NavManager.NavigateTo("/signup");
    }
}
