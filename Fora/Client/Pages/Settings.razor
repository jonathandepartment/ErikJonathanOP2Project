@page "/settings"
@using Fora.Shared.ViewModels
@using System.Security.Claims
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject ISettingsService SettingsService
@inject IJSRuntime JSRuntime

<PageTitle>Settings</PageTitle>

<h2 class="display-2">Settings </h2>

@*user interests*@
<div class="row">
    <TogglableComponent Title="My Interests">
        <div class="col">
            @if (MyInterests != null)
            {
                <ul class="list-group">
                    @foreach (var interest in MyInterests)
                    {
                        <li class="list-group-item w-75">
                            @interest.Name
                            <button @onclick="() => RemoveUserInterest(interest.Id)" class="btn btn-sm btn-danger float-end">Remove</button>
                        </li>
                    }
                </ul>
            }
        </div>
        <div class="col">
            <h3>Add a new interest</h3>
            <EditForm Model="NewInterest" OnValidSubmit="AddNewInterest">
                <InputText @bind-Value="NewInterest.Name" />
                <button class="btn btn-sm btn-success" type="submit">Add</button>
            </EditForm>
        </div>
    </TogglableComponent>
</div>

@*all interests*@
<div class="row">
    <TogglableComponent Title="All Interests">
        <h3>All interests</h3>
        @if (AllInterests != null)
        {
            <ul class="list-group">
                @foreach (var interest in AllInterests)
                {
                    <li class="list-group-item w-75">
                        @interest.Name
                        <button @onclick="() => AddUserInterest(interest.Id)" class="btn btn-sm btn-success float-end">Add to my interests</button>
                        @if (Admin || CurrentUserId == interest.AuthorId)
                        {
                            <button @onclick="() => RemoveInterest(interest.Id)" class="btn btn-sm btn-danger float-end">Remove</button>
                        }
                    </li>
                }
            </ul>
        }
    </TogglableComponent>
</div>

@*change password*@
<div class="row">
    <TogglableComponent Title="Change Password">
        <h3>Change password</h3>
        <EditForm Model="Password" OnValidSubmit="ChangePassword">
            <DataAnnotationsValidator />
            <InputText @bind-Value="Password.OldPassword" type="password" placeholder="old password" />
            <InputText @bind-Value="Password.NewPassword" type="password" placeholder="new password" />
            <button class="btn btn-sm btn-success mt-2" type="submit">Change</button>
            <ValidationSummary />
        </EditForm>
    </TogglableComponent>
</div>


@*see own threads*@
<div class="row">
    <TogglableComponent Title="Threads">
        <h3>Threads</h3>
        @if (MyThreads != null && MyThreads.Count > 0)
        {
            <ul class="list-group">             
            @foreach (var thread in MyThreads)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <a href="/threadmessages/@thread.Id">@thread.Name</a>
                    <span class="badge bg-primary rounded-pill">@thread.MessageCount</span>
                </li>
            }
            </ul>
        }
    </TogglableComponent>
</div>

<div class="row">
    <TogglableComponent Title="Edit User">
        @*flag as removed*@
        <button @onclick="() => FlagAsRemoved()" class="btn btn-warning">Flag as removed</button>
        @*remove user*@
        <button @onclick="RemoveUser" class="btn btn-danger">Remove user</button>
    </TogglableComponent>
</div>

<AuthorizeView Roles="Admin">
    <hr/>
    <h3>Admin Controls</h3>
    @*remove interests*@

    @*check if user is admin*@

    <div class="row">
        <h4>Users</h4>
        @*promote to admin*@

        @*demote admin*@

        @*ban user*@

        @*unban user*@
    </div>
</AuthorizeView>

@code {
    int CurrentUserId { get; set; }
    bool Admin { get; set; }
    List<InterestViewModel> MyInterests { get; set; }
    List<InterestViewModel> AllInterests { get; set; }

    List<ThreadViewModel> MyThreads { get; set; }

    ChangePasswordModel Password = new();
    AddInterestModel NewInterest { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        MyThreads = await SettingsService.GetMyThreads();
        MyInterests = await SettingsService.GetMyInterests();
        AllInterests = await SettingsService.GetAllInterests();
        AllInterests = AllInterests.Where(i => MyInterests.All(mi => mi.Id != i.Id))
            .ToList();

        // get user
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var id = authstate.User.Claims.Where(c => c.Type == ClaimTypes.Authentication)
            .Select(c => c.Value).SingleOrDefault();
        var adminCheck = authstate.User.Claims.Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value).SingleOrDefault();

        Admin = adminCheck == "Admin" ? true : false;
        CurrentUserId = int.Parse(id);
    }

    async Task AddNewInterest()
    {
        var addedInterest = await SettingsService.AddNewInterest(NewInterest);
        await SettingsService.AddNewUserInterest(addedInterest.Id);
        NewInterest.Name = string.Empty;
        StateHasChanged();
    }

    async Task AddUserInterest(int id)
    {
        await SettingsService.AddNewUserInterest(id);
        AllInterests = AllInterests.Where(i => i.Id != id).ToList();
    }

    async Task RemoveInterest(int id)
    {
        AllInterests = AllInterests.Where(i => i.Id != id).ToList();
        await SettingsService.RemoveInterest(id);
    }

    async Task RemoveUserInterest(int id)
    {
        MyInterests = MyInterests.Where(i => i.Id != id).ToList();
        await SettingsService.RemoveUserInterest(id);
    }

    async Task ChangePassword()
    {
        await SettingsService.ChangePassword(Password);
        Password = new();
    }

    async Task RemoveUser()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

        if (confirm)
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = state.User.Claims.Where(c => c.Type == ClaimTypes.UserData)
                .Select(c => c.Value).SingleOrDefault();

            await SettingsService.DeleteUser(userId);
            await LocalStorage.RemoveItemAsync("token");
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();

            NavManager.NavigateTo("/signup");
        }
    }

    async Task FlagAsRemoved(string userToRemove = "")
    {
        if (string.IsNullOrEmpty(userToRemove))
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var username = state.User.Claims.Where(c => c.Type == ClaimTypes.Name)
                .Select(c => c.Value).SingleOrDefault();

            await SettingsService.FlagUserAsRemoved(username);

            await LocalStorage.RemoveItemAsync("token");
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();

            NavManager.NavigateTo("/login");
        }
        else
        {
            await SettingsService.FlagUserAsRemoved(userToRemove);
        }

    }
}
