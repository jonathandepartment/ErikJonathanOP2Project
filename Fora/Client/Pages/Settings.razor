@page "/settings"
@using Fora.Shared.ViewModels
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject ISettingsService SettingsService

<h2 class="display-2">Settings </h2>
@*user interests*@
<div class="row">
    <div class="col-8">
        <h3>My interests</h3>
        @if (MyInterests != null)
        {
            <ul class="list-group">
            @foreach (var interest in MyInterests)
            {
                <li class="list-group-item w-75">
                    @interest.Name
                    <button class="btn btn-sm btn-danger float-end">Remove</button>
                </li>
            }
            </ul>
        }
        @*remove user interests*@
        @*remove interests i've created*@
    </div>
    <div class="col-4">
        @*create new interest*@
        <h3>Add a new interest</h3>
        <form>
            <input type="text" placeholder="new interest name"/>
            <button type="submit" class="btn btn-sm btn-success">Add interest</button>
        </form>
        @*<EditForm>
            <InputText type="text" />
            <button class="btn btn-sm btn-success">Add</button>
        </EditForm>*@
    </div>
</div>

@*all interests*@
<div class="row">
    <h3>All interests</h3>
    @if (AllInterests != null)
    {
        
    }
    @*add to user interests*@
</div>

<div class="row rounded-1 m3 p-2 w-50">
    @*change password*@
    <h3>Change password</h3>
    <EditForm Model="Password" OnValidSubmit="ChangePassword">
        <InputText @bind-Value="Password.OldPassword" type="password" placeholder="old password" />
        <InputText @bind-Value="Password.NewPassword" type="password" placeholder="new password" />
        <button class="btn btn-success mt-2" type="submit">Change</button>
    </EditForm>
</div>

<div class="row">
    @*see own threads*@
    <h3>Threads</h3>
</div>

<div class="row">
    @*flag as removed*@
    <button class="btn btn-warning">Flag as removed</button>
    @*remove user*@
    <button class="btn btn-danger">Remove user</button>
</div>

<AuthorizeView Roles="Admin">
    <hr/>
    <h3>Admin Controls</h3>
    @*remove interests*@

    @*check if user is admin*@

    <div class="row">
        <h4>Users</h4>
        @*promote to admin*@

        @*demote admin*@

        @*ban user*@

        @*unban user*@
    </div>
</AuthorizeView>

@code {
    List<InterestViewModel> MyInterests { get; set; }
    List<InterestViewModel> AllInterests { get; set; }
    ChangePasswordModel Password = new();

    protected async override Task OnInitializedAsync()
    {
        MyInterests = await SettingsService.GetMyInterests();
        AllInterests = await SettingsService.GetAllInterests();
    }

    Task ChangePassword()
    {
        return null;
    }

    async Task RemoveUser(string userId)
    {

        //await HttpClient.DeleteAsync($"api/users/{userId}");
        await LocalStorage.RemoveItemAsync("token");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        foreach(var claim in authState.User.Claims)
        {
            var t = claim.Type;
            var v = claim.Value;
        }

        NavManager.NavigateTo("/signup");
    }
}
