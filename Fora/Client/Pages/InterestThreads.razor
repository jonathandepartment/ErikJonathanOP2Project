@page "/interestthreads/{Id:int}"
@using Fora.Shared.ViewModels
@inject NavigationManager navigationmanager
@inject IThreadService threadService


<h3>Browsing threads</h3>

<div class="container">
      <div class="row">
        <div class="col-lg-9 mb-3">
          <div class="row text-left mb-5">
            <div class="col-lg-6 mb-3 mb-sm-0">
              
              <input @bind-value="SearchText" @bind-value:event="oninput" placeholder="Search..."class="form-control form-control-lg bg-white bg-op-9 text-sm w-lg-50" tabindex="-98"/>
              </div>
            </div>
            <div class="col-lg-6 text-lg-right">
            <button @onclick="sortList" type="button" class="btn btn-primary">Sort list a-z</button>
              </div>
            </div>
          </div>
         </div>



@if(threads != null)
{
    @foreach(var thread in filteredSearch)
    {
        @if(!String.IsNullOrEmpty(thread.Name))
        {
          <a href="/threadmessages/@thread.Id" class="text-primary">@thread.Name</a>
          <p class="text-sm"><span class="op-6">Posted by</span> <a class="text-black">@(thread.User != null ? thread.User.Name : "Removed User")</a></p>
        }
    }
}


@code {

    [Parameter]
    public int Id { get; set; }
    List<ThreadViewModel> threads = new();

    string SearchText { get; set; } = "";

    List<ThreadViewModel> filteredSearch => threads.Where(
        thread => thread.Name.ToLower().Contains(SearchText.ToLower())).ToList();



    private void sortList()
    {
        threads = threads.OrderBy(x=>x.Name).ToList();

    }

        protected override async Task OnParametersSetAsync()
        {
            // Hämta ett intresse från servern med det specifika Idt 

            var result = await threadService.GetThreadsByInterest(Id);

            if(result != null)
            {
                threads = result;
            }
        }

        private void NavigateToMessages(int id)
    {
        navigationmanager.NavigateTo($"/threadmessages/{id}");
    }

}
